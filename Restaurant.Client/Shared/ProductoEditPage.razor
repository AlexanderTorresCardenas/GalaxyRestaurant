@inject IToastService ToastService
@inject SweetAlertService Swal

<div class="container">
    <dvi class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg mt-1">
                <div class="card-header">
                    <h3>Platos para restaurant</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="Request" OnValidSubmit="Grabar">
                        <DataAnnotationsValidator />
                        <div class="row">

                            <div class="mb-3 row">
                                <label class="form-label" for="nombre">Nombre:</label>
                                <input type="text" id="nombre" class="form-control" @bind-value="Request.Nombre" />
                                <ValidationMessage For="() => Request.Nombre" />
                            </div>
                            <div class="mb-3 row">
                                <label class="form-label" for="descripcion">Descripción:</label>
                                <input type="text" id="descripcion" class="form-control" @bind-value="Request.Descripcion" />
                                <ValidationMessage For="() => Request.Descripcion" />
                            </div>
                            <div class="mb-3 row">
                                <label class="form-label" for="preciounitario">Precio Unitario:</label>
                                <InputNumber id="preciounitario" class="form-control" @bind-Value="Request.Precio" />
                                <ValidationMessage For="() => Request.Precio" />
                            </div>
                            <div class="mb-3 row">
                                <label class="form-label" for="categoria">Categoría:</label>
                                <InputSelect id="categoria" @bind-Value="Request.CategoriaId" class="form-select">
                                    <option value="0">Seleccione una categoría</option>
                                    @foreach (var item in Categorias)
                                    {
                                        <option value="@item.Id">@item.Descripcion</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="card">
                                <div class="card-body">
                                    @if (Request.Base64Imagen is not null)
                                    {
                                        <div style="margin: 10px">
                                            <img src="data:image/jpeg;base64, @Request.Base64Imagen" alt="@Request.Nombre" style="width:400px" />
                                        </div>
                                    }
                                    else
                                    {
                                        <img src="@Request.UrlImagen" alt="@Request.Nombre" style="width: 400px" />
                                    }
                                </div>
                                <div class="card-footer">
                                    <InputFile accept="image/png, image/jpeg, image/webp" style="display: none"
                                               OnChange="OnFileUploaded" id="file" />
                                    <label for="file" class="btn btn-outline-secondary"><i class="bi bi-camera me-1"></i>BUSCAR IMAGEN</label>
                                </div>
                            </div>

                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                <button type="submit" class="btn btn-outline-primary"><i class="bi bi-floppy me-1"></i>@TextoBoton</button>
                            </div>
                            <div class="col">
                                <button type="reset" class="btn btn-outline-danger"><i class="bi bi-x-circle me-1"></i>Limpiar</button>
                            </div>
                        </div>


                        <ValidationSummary />

                    </EditForm>
                </div>
            </div>
        </div>
    </dvi>
</div>

@code {

    [Parameter]
    public ProductoDTORequest Request { get; set; } = new();

    [Parameter]
    public EventCallback OnGrabar { get; set; }

    [Parameter]
    public string Titulo { get; set; } = string.Empty;

    [Parameter]
    public ICollection<CategoriaDTO> Categorias { get; set; } = new List<CategoriaDTO>();

    public string TextoBoton { get; set; } = "Crear";

    private async void Grabar()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Guardar",
                Text = "Desea guardar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                ConfirmButtonColor = "#3085d6",
                CancelButtonText = "Cancelar",
                CancelButtonColor = "#d33"
            });

        if (result.IsConfirmed)
        {
            OnGrabar.InvokeAsync();
        }
    }

    protected override void OnInitialized()
    {
        TextoBoton = Request.Id == 0 ? "Crear" : "Actualizar";
    }

    private async Task OnFileUploaded(InputFileChangeEventArgs e)
    {
        try
        {
            var imagen = e.File;
            var buffer = new byte[imagen.Size];
            var _ = await imagen.OpenReadStream().ReadAsync(buffer); // Extrae el base64

            Request.Base64Imagen = Convert.ToBase64String(buffer);
            Request.NombreArchivo = imagen.Name;
            Request.UrlImagen = null;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }
}